<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAADAAAA
</value>
  </data>
</root>